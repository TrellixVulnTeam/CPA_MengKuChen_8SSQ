{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/chenmengku/Desktop/COSI/COSI-153A/CPA1-old/components/Profile.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nvar Profile = function Profile(props) {\n  var _useState = useState({\n    name: '',\n    email: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      info = _useState2[0],\n      setInfo = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  useEffect(function () {\n    getData();\n  }, []);\n\n  var getData = function getData() {\n    var jsonValue, data;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('@profile_info'));\n\n          case 3:\n            jsonValue = _context.sent;\n            data = null;\n\n            if (jsonValue != null) {\n              data = JSON.parse(jsonValue);\n              setInfo(data);\n              setName(data.name);\n              setEmail(data.email);\n              console.log('just set Info, Name and Email');\n            } else {\n              console.log('just read a null value from Storage');\n              setInfo({});\n              setName(\"\");\n              setEmail(\"\");\n            }\n\n            _context.next = 12;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"error in getData \");\n            console.dir(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var storeData = function storeData(value) {\n    var jsonValue;\n    return _regeneratorRuntime.async(function storeData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            jsonValue = JSON.stringify(value);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@profile_info', jsonValue));\n\n          case 4:\n            console.log('just stored ' + jsonValue);\n            _context2.next = 11;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"error in storeData \");\n            console.dir(_context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var clearAll = function clearAll() {\n    return _regeneratorRuntime.async(function clearAll$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            console.log('in clearData');\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n          case 4:\n            _context3.next = 10;\n            break;\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(\"error in clearData \");\n            console.dir(_context3.t0);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"Profile Demo\"), React.createElement(TextInput, {\n    style: styles.textinput,\n    placeholder: \"name\",\n    onChangeText: function onChangeText(text) {\n      setName(text);\n    },\n    value: name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }), React.createElement(TextInput, {\n    style: styles.textinput,\n    placeholder: \"email\",\n    onChangeText: function onChangeText(text) {\n      setEmail(text);\n    },\n    value: email,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }), React.createElement(Button, {\n    color: \"red\",\n    title: \"Save Profile to Memory\",\n    onPress: function onPress() {\n      console.log(\"saving profile\");\n      var theInfo = {\n        name: name,\n        email: email\n      };\n      console.log(\"theInfo=\" + theInfo);\n      setInfo(theInfo);\n      console.log('data=' + JSON.stringify(theInfo));\n      storeData(theInfo);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }), React.createElement(Button, {\n    color: \"green\",\n    title: \"Clear memory\",\n    onPress: function onPress() {\n      console.log('clearing memory');\n      clearAll();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }), React.createElement(Button, {\n    color: \"blue\",\n    title: \"Load Profile from Memory\",\n    onPress: function onPress() {\n      console.log('loading profile');\n      getData();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, \"name=\", name, \" email=\", email, \" info=\", JSON.stringify(info)));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textinput: {\n    margin: 20,\n    fontSize: 20\n  },\n  header: {\n    fontSize: 40,\n    color: 'blue'\n  },\n  rowContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  }\n});\nexport default Profile;","map":{"version":3,"sources":["/Users/chenmengku/Desktop/COSI/COSI-153A/CPA1-old/components/Profile.js"],"names":["React","useState","useEffect","AsyncStorage","Profile","props","name","email","info","setInfo","setName","setEmail","getData","getItem","jsonValue","data","JSON","parse","console","log","dir","storeData","value","stringify","setItem","clearAll","clear","styles","container","header","textinput","text","theInfo","StyleSheet","create","flex","flexDirection","backgroundColor","alignItems","justifyContent","margin","fontSize","color","rowContainer"],"mappings":"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","sourcesContent":["/*\n  Profile.js is a demo of using the Asynchronous Storage...\n  It looks up your name and email and other info from async storage\n  and puts it on the page. It also lets you update this info.\n\n  Before loading this app you need to install async-storage with\n  npm install @react-native-async-storage/async-storage\n  Here is a link to the documentation:\n  https://react-native-async-storage.github.io/async-storage/docs/api\n*/\nimport React, { useState, useEffect } from \"react\";\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\nconst Profile = (props) => {\n  const [info, setInfo] = useState({name:'',email:''});\n  const [name, setName] = useState('');\n  const [email,setEmail] = useState('')\n\n  // when the component is loaded it gets the data from storage\n  // and updatges the info, name, and email fields\n  // but this is the only time useEffect is called\n  useEffect(() => {getData()}\n           ,[])\n\n  // getData uses AsyncStorage to access the stored profile info as a string\n  // then it uses JSON.parse to turn that string to a JSON object\n  // finally it uses the set functions for the useState hook to set the\n  // info, email, and name state variables.\n  const getData = async () => {\n        try {\n          // the '@profile_info' can be any string\n          const jsonValue = await AsyncStorage.getItem('@profile_info')\n          let data = null\n          if (jsonValue!=null) {\n            data = JSON.parse(jsonValue)\n            setInfo(data)\n            setName(data.name)\n            setEmail(data.email)\n            console.log('just set Info, Name and Email')\n          } else {\n            console.log('just read a null value from Storage')\n            setInfo({})\n            setName(\"\")\n            setEmail(\"\")\n          }\n\n\n        } catch(e) {\n          console.log(\"error in getData \")\n          console.dir(e)\n          // error reading value\n        }\n  }\n\n  // storeData converts the value stored in the info variable to a string\n  // which is then writes into local storage using AsyncStorage.setItem.\n  const storeData = async (value) => {\n        try {\n          const jsonValue = JSON.stringify(value)\n          await AsyncStorage.setItem('@profile_info', jsonValue)\n          console.log('just stored '+jsonValue)\n        } catch (e) {\n          console.log(\"error in storeData \")\n          console.dir(e)\n          // saving error\n        }\n  }\n\n  // clearAll calls AsyncStorate.clear to remove all local storage for this app\n  // we could be more selective and only remove the profile_info, but for\n  // debugging it is good to remove everything\n  const clearAll = async () => {\n        try {\n          console.log('in clearData')\n          await AsyncStorage.clear()\n        } catch(e) {\n          console.log(\"error in clearData \")\n          console.dir(e)\n          // clear error\n        }\n  }\n\n\n\n\n      return (\n            <View style={styles.container}>\n              <Text style={styles.header}>\n                 Profile Demo\n              </Text>\n              <TextInput\n                    style={styles.textinput}\n                    placeholder=\"name\"\n                    onChangeText={text => {\n                      setName(text)\n                    }}\n                    value={name}\n                />\n              <TextInput\n                    style={styles.textinput}\n                    placeholder=\"email\"\n                    onChangeText={text => {setEmail(text)}}\n                    value={email}\n                />\n              <Button\n                    color='red' title='Save Profile to Memory'\n                    onPress = {() => {\n                         console.log(\"saving profile\");\n                         const theInfo = {name:name,email:email}\n                         console.log(`theInfo=${theInfo}`)\n                         setInfo(theInfo)\n                         console.log('data='+JSON.stringify(theInfo))\n                         storeData(theInfo)\n                       }}\n                />\n              <Button\n                  color='green' title='Clear memory'\n                  onPress = {() => {\n                        console.log('clearing memory');\n                        clearAll()\n                      }}\n                />\n              <Button\n                  color='blue' title='Load Profile from Memory'\n                  onPress = {() => {\n                        console.log('loading profile');\n                        getData()\n                      }}\n                />\n              <Text>\n               name={name} email={email} info={JSON.stringify(info)}\n              </Text>\n\n            </View>\n      );\n    }\n  const styles = StyleSheet.create ({\n    container: {\n      flex: 1,\n      flexDirection:'column',\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    textinput:{\n      margin:20,\n      fontSize:20\n    },\n    header: {\n      fontSize:40,\n      color:'blue'\n    },\n    rowContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n  });\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}